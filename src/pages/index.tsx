import { SignInButton, useUser } from "@clerk/nextjs";
import dayjs from "dayjs";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { type RouterOutputs, api } from "~/utils/api";
import relativeTime from 'dayjs/plugin/relativeTime';
import { LoadingPage, LoadingSpinner } from "../Components/Loading";
import { useState } from "react";
import { toast } from "react-hot-toast";
import Link from "next/link";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { user } = useUser()
  const [input, setInput] = useState("");

  const ctx = api.useContext()

  if (!user) return null

  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.posts.getAll.invalidate();
    },
    onError: (e)=> {
      const errorMessage = e.data?.zodError?.fieldErrors?.content;
      if(errorMessage && errorMessage[0]){
        toast.error(errorMessage[0]);
      }
      else{
        toast.error("Failed to post, please try again later")
      }
    }
  });


  return (
    <div className="flex w-full gap-3">
      <Image
        src={user.profileImageUrl}
        alt="Profile image"
        width={56}
        height={56}
        className="h-14 w-14 rounded-full"
      />
      <input 
        placeholder="Type Your tweet" 
        className="grow bg-transparent outline-none" 
        value={input} 
        onChange={(e) => setInput(e.target.value)}
        onKeyDown={(e) => {
          if(e.key === "Enter"){
            e.preventDefault();
            if(input !== ""){
              mutate({content: input})
            }
          }
        }} 
      />
      {input && !isPosting && (
          <button 
            className={"bg-blue-500 hover:bg-blue-600 active:bg-violet-700 focus:outline-none focus:ring focus:ring-violet-300 rounded-md px-6 "} 
            onClick={() => mutate({ content: input })}
          >
              Post
          </button>
      )}
      {isPosting && (
        <div className="flex items-center justify-center">
          <LoadingSpinner size={20}/>
        </div>
      )}
    </div>
  )

}

type PostWithUser = RouterOutputs['posts']['getAll'][number];
const PostView = (props: PostWithUser) => {
  const { post, author } = props;
  return (
    <div key={post.id} className="border-b border-slate-400 p-8 flex align-middle">
      <Image
        src={author.profilePicture}
        alt="Profile image"
        width={56}
        height={56}
        className="h-14 w-14 rounded-full"
      />
      <div className="flex flex-col ml-1">
        <div className="flex gap-1 text-slate-300">
          <Link href={`/@${author.userName}`}>
            <span>{`@${author.userName}`}</span>
          </Link> 
          <span className="font-thin">{` . ${dayjs(post.createdAt).fromNow()}`}</span>
        </div>
        <Link href={`/post/${post.id}`}>
          <span className="text-xl">{post.content}</span>
        </Link>
      </div>
    </div>
  )
}

const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();
  if (postsLoading) return <LoadingPage />

  if (!data) return <div>Something went wrong</div>

  return (
    <div className="flex flex-col">
      {data.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  )
}

const Home: NextPage = () => {
  const { isLoaded: userLoaded, isSignedIn } = useUser()

  //start fetching a.s.a.p
  api.posts.getAll.useQuery();

  if (!userLoaded) return <div />


  return (
    <>
      <Head>
        <title>Twitter Clone</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="h-full w-full border-x border-slate-400 md:max-w-2xl">
          <div className="flex border-b border-slate-400 p-4">
            {!isSignedIn && (
              <div className="flex justify-center">
                <SignInButton />
              </div>
            )}
            {isSignedIn && <CreatePostWizard />}
          </div>
          <Feed />
        </div>
      </main>
    </>
  )
}

export default Home
