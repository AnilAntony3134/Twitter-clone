import { useUser } from "@clerk/nextjs";
import type {GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import Image from "next/image";
import { PostView } from "~/Components/postView";
import { generateSSGHelper } from "~/server/api/helpers/ssgHelper";
import { LoadingPage } from "~/Components/loading";
import { PageLayout } from "../../Components/layout";

const ProfileFeed = (props: {userId: string}) => {
    const {data, isLoading} = api.posts.getPostsByUserId.useQuery({
        userId: props.userId
    });

    if (isLoading) return <LoadingPage/>

    if(!data || data.length == 0) return <div>User Has not posted</div>

    return(
        <div className="flex flex-col">
            {data.map((fullPost)=> (
                <PostView {...fullPost} key={fullPost.post.id}/>
            ))}
        </div>
    )

}


const ProfilePage: NextPage<{id: string}> = ({id}) => {
  const { isLoaded: userLoaded } = useUser()

  const {data} = api.posts.getPostById.useQuery({id})

  if(!data) return <div>404</div>

  if (!userLoaded) return <div />


  return (
    <>
      <Head>
        <title>{data.post.content}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
      <PostView {...data} key={data.post.id}/>
      </PageLayout>
    </>
  )
}

export const getStaticProps: GetStaticProps = async (context) => {
    const ssg = generateSSGHelper();

    const id = context.params?.id;

    if (typeof id !== 'string') throw new Error("No id");

    await ssg.posts.getPostById.prefetch({ id });

    return {
        props: {
            trpcState: ssg.dehydrate(),
            id
        }
    }
}

export const getStaticPaths = () => {
    return { paths: [], fallback: "blocking" }
}

export default ProfilePage
